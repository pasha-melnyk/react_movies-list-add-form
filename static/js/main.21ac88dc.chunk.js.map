{"version":3,"sources":["components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","helpers.ts","App.tsx","index.tsx"],"names":["Fields","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","getPropertyName","name","toUpperCase","slice","getPropertyNameOnBlur","NewMovie","state","isTitleValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","isTitleValidOnBlur","isImgUrlValidOnBlur","isImdbUrlValidOnBlur","isImdbIdValidOnBlur","handleChange","event","target","value","InputName","InputNameOnBlur","Description","setState","currentState","validateOnBlur","handleOnBlur","handleSubmit","preventDefault","validateForm","props","onAdd","clearState","regex","match","trim","Title","ImgUrl","ImdbUrl","ImdbId","imdbIds","includes","Error","this","onSubmit","htmlFor","classNames","type","id","onChange","onBlur","disabled","React","Component","App","moviesFromServer","addMovie","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21ac88dc.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getPropertyName, getPropertyNameOnBlur } from '../../helpers';\nimport './NewMovie.scss';\n\nenum Fields {\n  Title = 'title',\n  Description = 'description',\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n  ImdbId = 'imdbId',\n}\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n  imdbIds: string[];\n};\n\ntype State = Movie & {\n  isTitleValid: boolean;\n  isImgUrlValid: boolean;\n  isImdbUrlValid: boolean;\n  isImdbIdValid: boolean;\n  isTitleValidOnBlur: boolean;\n  isImgUrlValidOnBlur: boolean;\n  isImdbUrlValidOnBlur: boolean;\n  isImdbIdValidOnBlur: boolean;\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleValid: true,\n    isImgUrlValid: true,\n    isImdbUrlValid: true,\n    isImdbIdValid: true,\n    isTitleValidOnBlur: false,\n    isImgUrlValidOnBlur: false,\n    isImdbUrlValidOnBlur: false,\n    isImdbIdValidOnBlur: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    const InputName = getPropertyName(name);\n    const InputNameOnBlur = getPropertyNameOnBlur(name);\n\n    if (name === Fields.Description) {\n      this.setState((currentState) => ({\n        ...currentState,\n        [name]: value,\n      }));\n    } else {\n      this.setState((currentState) => ({\n        ...currentState,\n        [name]: value,\n        [InputName]: true,\n        [InputNameOnBlur]: this.validateOnBlur(event),\n      }));\n    }\n  };\n\n  handleOnBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n    const InputNameOnBlur = getPropertyNameOnBlur(name);\n\n    this.setState((currentState) => ({\n      ...currentState,\n      [InputNameOnBlur]: this.validateOnBlur(event),\n    }));\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    const isFormValid = this.validateForm();\n\n    if (isFormValid) {\n      this.props.onAdd({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n\n      this.clearState();\n    }\n  };\n\n  validateForm = () => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (!title || !imgUrl || !imdbUrl || !imdbId) {\n      this.setState({\n        isTitleValid: !!title.trim(),\n        isImgUrlValid: !!imgUrl.trim(),\n        isImdbUrlValid: !!imdbUrl.trim(),\n        isImdbIdValid: !!imdbId.trim(),\n      });\n\n      return false;\n    }\n\n    if (!imgUrl.match(regex) || !imdbUrl.match(regex)) {\n      this.setState({\n        isImgUrlValid: !!imgUrl.match(regex),\n        isImdbUrlValid: !!imdbUrl.match(regex),\n      });\n\n      return false;\n    }\n\n    return true;\n  };\n\n  validateOnBlur = (event: React.FocusEvent<HTMLInputElement, Element>\n  | React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    switch (name) {\n      case Fields.Title: {\n        return value.trim();\n      }\n\n      case Fields.ImgUrl: {\n        return value.trim() && !!value.match(regex);\n      }\n\n      case Fields.ImdbUrl: {\n        return value.trim() && !!value.match(regex);\n      }\n\n      case Fields.ImdbId: {\n        return value.trim() && !this.props.imdbIds.includes(value);\n      }\n\n      default:\n        throw new Error('enter valid data');\n    }\n  };\n\n  clearState = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isTitleValid: true,\n      isImgUrlValid: true,\n      isImdbUrlValid: true,\n      isImdbIdValid: true,\n      isTitleValidOnBlur: false,\n      isImgUrlValidOnBlur: false,\n      isImdbUrlValidOnBlur: false,\n      isImdbIdValidOnBlur: false,\n    });\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imdbUrl,\n      imgUrl,\n      imdbId,\n      isTitleValid,\n      isImdbIdValid,\n      isImdbUrlValid,\n      isImgUrlValid,\n      isTitleValidOnBlur,\n      isImgUrlValidOnBlur,\n      isImdbUrlValidOnBlur,\n      isImdbIdValidOnBlur,\n    } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor={Fields.Title}>\n            Title\n          </label>\n          <div className=\"control has-icons-right\">\n            <input\n              className={classNames(\n                'input',\n                { 'is-success': isTitleValidOnBlur },\n                { 'is-danger': !isTitleValid || !isTitleValidOnBlur },\n              )}\n              type=\"text\"\n              id={Fields.Title}\n              name={Fields.Title}\n              value={title}\n              onChange={this.handleChange}\n              onBlur={this.handleOnBlur}\n            />\n            {isTitleValidOnBlur && (\n              <span className=\"icon is-small is-right\">\n                <i className=\"fas fa-check has-text-success\" />\n              </span>\n            )}\n          </div>\n          {(!isTitleValid || !isTitleValidOnBlur) && (\n            <p className=\"help is-danger\">This title is invalid</p>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor={Fields.Description}>\n            Description\n            <textarea\n              className=\"textarea\"\n              id={Fields.Description}\n              name={Fields.Description}\n              value={description}\n              onChange={this.handleChange}\n            />\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor={Fields.ImdbUrl}>\n            ImdbUrl\n          </label>\n          <div className=\"control has-icons-right\">\n            <input\n              className={classNames(\n                'input',\n                { 'is-success': isImdbUrlValidOnBlur },\n                { 'is-danger': !isImdbUrlValid || !isImdbUrlValidOnBlur },\n              )}\n              type=\"text\"\n              id={Fields.ImdbUrl}\n              name={Fields.ImdbUrl}\n              value={imdbUrl}\n              onChange={this.handleChange}\n              onBlur={this.handleOnBlur}\n            />\n            {isImdbUrlValidOnBlur && (\n              <span className=\"icon is-small is-right\">\n                <i className=\"fas fa-check has-text-success\" />\n              </span>\n            )}\n          </div>\n          {(!isImdbUrlValid || !isImdbUrlValidOnBlur) && (\n            <p className=\"help is-danger\">This imdb url is invalid</p>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor={Fields.ImgUrl}>\n            ImgUrl\n          </label>\n          <div className=\"control has-icons-right\">\n            <input\n              className={classNames(\n                'input',\n                { 'is-success': isImgUrlValidOnBlur },\n                { 'is-danger': !isImgUrlValid || !isImgUrlValidOnBlur },\n              )}\n              type=\"text\"\n              id={Fields.ImgUrl}\n              name={Fields.ImgUrl}\n              value={imgUrl}\n              onChange={this.handleChange}\n              onBlur={this.handleOnBlur}\n            />\n            {isImgUrlValidOnBlur && (\n              <span className=\"icon is-small is-right\">\n                <i className=\"fas fa-check has-text-success\" />\n              </span>\n            )}\n          </div>\n          {(!isImgUrlValid || !isImgUrlValidOnBlur) && (\n            <p className=\"help is-danger\">This img url is invalid</p>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor={Fields.ImdbId}>\n            ImdbId\n          </label>\n          <div className=\"control has-icons-right\">\n            <input\n              className={classNames(\n                'input',\n                { 'is-success': isImdbIdValidOnBlur },\n                { 'is-danger': !isImdbIdValid || !isImdbIdValidOnBlur },\n              )}\n              type=\"text\"\n              id={Fields.ImdbId}\n              name={Fields.ImdbId}\n              value={imdbId}\n              onChange={this.handleChange}\n              onBlur={this.handleOnBlur}\n            />\n            {isImdbIdValidOnBlur && (\n              <span className=\"icon is-small is-right\">\n                <i className=\"fas fa-check has-text-success\" />\n              </span>\n            )}\n          </div>\n          {(!isImdbIdValid || !isImdbIdValidOnBlur) && (\n            <p className=\"help is-danger\">This imdb url is invalid</p>\n          )}\n        </div>\n\n        <div className=\"control\">\n          <button\n            className=\"button ui submit is-success\"\n            type=\"submit\"\n            disabled={!isTitleValid || !isImdbUrlValid || !isImgUrlValid || !isImdbIdValid}\n          >\n            Add movie\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const getPropertyName = (name: string) => (\n  `is${name[0].toUpperCase() + name.slice(1)}Valid`\n);\n\nexport const getPropertyNameOnBlur = (name: string) => (\n  `is${name[0].toUpperCase() + name.slice(1)}ValidOnBlur`\n);\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (newMovie: Movie) => {\n    this.setState((state) => ({\n      movies: [...state.movies, newMovie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n    const imdbIds = movies.map(movie => movie.imdbId);\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n            imdbIds={imdbIds}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}