{"version":3,"sources":["components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","helpers.ts","App.tsx","index.tsx"],"names":["Fields","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","getInputValidationName","name","toUpperCase","slice","getInputFocusedName","NewMovie","state","isTitleValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","wasTitleFocused","wasImgUrlFocused","wasImdbUrlFocused","wasImdbIdFocused","wasSubmitButtonPressed","handleChange","event","target","value","isInputValid","Description","setState","prevState","validateInput","handleBlur","handleFocus","wasInputFocused","handleSubmit","preventDefault","showInvalidInputs","validateForm","props","onAdd","getNewMovie","clearState","trim","Title","ImdbUrl","ImgUrl","test","ImdbId","imdbIds","includes","Error","disableButton","this","onSubmit","htmlFor","classNames","type","id","onChange","onBlur","onFocus","disabled","React","Component","App","moviesFromServer","addMovie","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1e44e4f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getInputValidationName, getInputFocusedName } from '../../helpers';\nimport './NewMovie.scss';\n\nenum Fields {\n  Title = 'title',\n  Description = 'description',\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n  ImdbId = 'imdbId',\n}\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n  imdbIds: string[];\n};\n\ntype State = Movie & {\n  isTitleValid: boolean;\n  isImgUrlValid: boolean;\n  isImdbUrlValid: boolean;\n  isImdbIdValid: boolean;\n  wasTitleFocused: boolean;\n  wasImgUrlFocused: boolean;\n  wasImdbUrlFocused: boolean;\n  wasImdbIdFocused: boolean;\n  wasSubmitButtonPressed: boolean\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleValid: false,\n    isImgUrlValid: false,\n    isImdbUrlValid: false,\n    isImdbIdValid: false,\n    wasTitleFocused: false,\n    wasImgUrlFocused: false,\n    wasImdbUrlFocused: false,\n    wasImdbIdFocused: false,\n    wasSubmitButtonPressed: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    const isInputValid = getInputValidationName(name);\n\n    if (name === Fields.Description) {\n      this.setState((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        ...prevState,\n        [name]: value,\n        [isInputValid]: this.validateInput(event),\n      }));\n    }\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n    const isInputValid = getInputValidationName(name);\n\n    this.setState((prevState) => ({\n      ...prevState,\n      [isInputValid]: this.validateInput(event),\n    }));\n  };\n\n  handleFocus = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n    const wasInputFocused = getInputFocusedName(name);\n\n    this.setState((state) => ({\n      ...state,\n      [wasInputFocused]: true,\n    }));\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    this.showInvalidInputs();\n\n    const isFormValid = this.validateForm();\n\n    if (isFormValid) {\n      this.props.onAdd(this.getNewMovie());\n\n      this.clearState();\n    }\n  };\n\n  showInvalidInputs = () => {\n    this.setState({\n      wasImdbIdFocused: true,\n      wasImdbUrlFocused: true,\n      wasImgUrlFocused: true,\n      wasTitleFocused: true,\n      wasSubmitButtonPressed: true,\n    });\n  };\n\n  getNewMovie = () => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    return {\n      title: title.trim(),\n      description: description.trim(),\n      imgUrl: imgUrl.trim(),\n      imdbUrl: imdbUrl.trim(),\n      imdbId: imdbId.trim(),\n    };\n  };\n\n  validateForm = () => {\n    const {\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    return isTitleValid\n    && isImgUrlValid\n    && isImdbUrlValid\n    && isImdbIdValid;\n  };\n\n  validateInput = (event: React.FocusEvent<HTMLInputElement, Element>\n  | React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    switch (name) {\n      case Fields.Title: {\n        return value.trim();\n      }\n\n      case Fields.ImdbUrl:\n      case Fields.ImgUrl: {\n        return value.trim() && regex.test(value);\n      }\n\n      case Fields.ImdbId: {\n        return value.trim() && !this.props.imdbIds.includes(value);\n      }\n\n      default:\n        throw new Error('enter valid data');\n    }\n  };\n\n  disableButton = () => {\n    const {\n      wasSubmitButtonPressed,\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    return wasSubmitButtonPressed\n    && (!isTitleValid\n    || !isImgUrlValid\n    || !isImdbUrlValid\n    || !isImdbIdValid);\n  };\n\n  clearState = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isTitleValid: false,\n      isImgUrlValid: false,\n      isImdbUrlValid: false,\n      isImdbIdValid: false,\n      wasTitleFocused: false,\n      wasImgUrlFocused: false,\n      wasImdbUrlFocused: false,\n      wasImdbIdFocused: false,\n      wasSubmitButtonPressed: false,\n    });\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imdbUrl,\n      imgUrl,\n      imdbId,\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n      wasTitleFocused,\n      wasImgUrlFocused,\n      wasImdbUrlFocused,\n      wasImdbIdFocused,\n    } = this.state;\n\n    return (\n      <>\n        <h3 className=\"title\">Add new movie</h3>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.Title}>\n              Title\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': wasTitleFocused && isTitleValid },\n                  { 'is-danger': wasTitleFocused && !isTitleValid },\n                )}\n                type=\"text\"\n                id={Fields.Title}\n                name={Fields.Title}\n                value={title}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onFocus={this.handleFocus}\n              />\n              {wasTitleFocused && isTitleValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {wasTitleFocused && !isTitleValid && (\n              <p className=\"help is-danger\">This title is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.Description}>\n              Description\n            </label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                id={Fields.Description}\n                name={Fields.Description}\n                value={description}\n                onChange={this.handleChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImdbUrl}>\n              ImdbUrl\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': wasImdbUrlFocused && isImdbUrlValid },\n                  { 'is-danger': wasImdbUrlFocused && !isImdbUrlValid },\n                )}\n                type=\"text\"\n                id={Fields.ImdbUrl}\n                name={Fields.ImdbUrl}\n                value={imdbUrl}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onFocus={this.handleFocus}\n              />\n              {wasImdbUrlFocused && isImdbUrlValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {wasImdbUrlFocused && !isImdbUrlValid && (\n              <p className=\"help is-danger\">This imdb url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImgUrl}>\n              ImgUrl\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': wasImgUrlFocused && isImgUrlValid },\n                  { 'is-danger': wasImgUrlFocused && !isImgUrlValid },\n                )}\n                type=\"text\"\n                id={Fields.ImgUrl}\n                name={Fields.ImgUrl}\n                value={imgUrl}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onFocus={this.handleFocus}\n              />\n              {wasImgUrlFocused && isImgUrlValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {wasImgUrlFocused && !isImgUrlValid && (\n              <p className=\"help is-danger\">This img url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImdbId}>\n              ImdbId\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': wasImdbIdFocused && isImdbIdValid },\n                  { 'is-danger': wasImdbIdFocused && !isImdbIdValid },\n                )}\n                type=\"text\"\n                id={Fields.ImdbId}\n                name={Fields.ImdbId}\n                value={imdbId}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onFocus={this.handleFocus}\n              />\n              {wasImdbIdFocused && isImdbIdValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {wasImdbIdFocused && !isImdbIdValid && (\n              <p className=\"help is-danger\">This imdb url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"control\">\n            <button\n              className=\"button is-success\"\n              type=\"submit\"\n              disabled={this.disableButton()}\n            >\n              Add movie\n            </button>\n          </div>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const getInputValidationName = (name: string) => (\n  `is${name[0].toUpperCase() + name.slice(1)}Valid`\n);\n\nexport const getInputFocusedName = (name: string) => (\n  `was${name[0].toUpperCase() + name.slice(1)}Focused`\n);\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (newMovie: Movie) => {\n    this.setState((state) => ({\n      movies: [...state.movies, newMovie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n    const imdbIds = movies.map(movie => movie.imdbId);\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n            imdbIds={imdbIds}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}