{"version":3,"sources":["components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","helpers.ts","App.tsx","index.tsx"],"names":["Fields","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","getInputValidationName","name","toUpperCase","slice","getInputFilledName","NewMovie","state","isTitleValid","isDescriptionValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","isTitleFilled","isDescriptionFilled","isImgUrlFilled","isImdbUrlFilled","isImdbIdFilled","wasSubmitButtonPressed","typingTimeout","setTimeout","handleChange","event","currentTarget","value","isInputFilled","setState","prevState","handleChangeDescription","handleBlur","validateInput","handleSubmit","preventDefault","showInvalidInputs","validateForm","props","onAdd","getNewMovie","clearState","trim","regex","isInputValid","Title","Description","ImdbUrl","ImgUrl","test","ImdbId","imdbIds","includes","Error","onKeyUp","clearTimeout","disableButton","this","onSubmit","htmlFor","classNames","type","id","onChange","onBlur","disabled","React","Component","App","moviesFromServer","addMovie","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5e54663.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getInputValidationName, getInputFilledName } from '../../helpers';\nimport './NewMovie.scss';\n\nenum Fields {\n  Title = 'title',\n  Description = 'description',\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n  ImdbId = 'imdbId',\n}\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n  imdbIds: string[];\n};\n\ntype State = Movie & {\n  isTitleValid: boolean;\n  isDescriptionValid: boolean;\n  isImgUrlValid: boolean;\n  isImdbUrlValid: boolean;\n  isImdbIdValid: boolean;\n  isDescriptionFilled: boolean;\n  isTitleFilled: boolean;\n  isImgUrlFilled: boolean;\n  isImdbUrlFilled: boolean;\n  isImdbIdFilled: boolean;\n  wasSubmitButtonPressed: boolean;\n  typingTimeout: NodeJS.Timeout;\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleValid: false,\n    isDescriptionValid: true,\n    isImgUrlValid: false,\n    isImdbUrlValid: false,\n    isImdbIdValid: false,\n    isTitleFilled: false,\n    isDescriptionFilled: false,\n    isImgUrlFilled: false,\n    isImdbUrlFilled: false,\n    isImdbIdFilled: false,\n    wasSubmitButtonPressed: false,\n    typingTimeout: setTimeout(() => {}, 0),\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n    const isInputFilled = getInputFilledName(name);\n\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: value,\n      [isInputFilled]: false,\n    }));\n  };\n\n  handleChangeDescription = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = event.currentTarget;\n\n    this.setState({\n      description: value,\n    });\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>\n  | React.FocusEvent<HTMLTextAreaElement>\n  | React.KeyboardEvent<HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n\n    this.validateInput(name, value);\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    this.showInvalidInputs();\n\n    const isFormValid = this.validateForm();\n\n    if (isFormValid) {\n      this.props.onAdd(this.getNewMovie());\n\n      this.clearState();\n    }\n  };\n\n  showInvalidInputs = () => {\n    this.setState({\n      isImdbIdFilled: true,\n      isImdbUrlFilled: true,\n      isImgUrlFilled: true,\n      isTitleFilled: true,\n      isDescriptionFilled: true,\n      wasSubmitButtonPressed: true,\n    });\n  };\n\n  getNewMovie = () => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    return {\n      title: title.trim(),\n      description: description.trim(),\n      imgUrl: imgUrl.trim(),\n      imdbUrl: imdbUrl.trim(),\n      imdbId: imdbId.trim(),\n    };\n  };\n\n  validateForm = () => {\n    const {\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    return isTitleValid\n    && isImgUrlValid\n    && isImdbUrlValid\n    && isImdbIdValid;\n  };\n\n  validateInput = (name: string, value: string) => {\n    const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const isInputValid = getInputValidationName(name);\n    const isInputFilled = getInputFilledName(name);\n\n    switch (name) {\n      case Fields.Title: {\n        this.setState((state) => ({\n          ...state,\n          [isInputValid]: !!value.trim(),\n          [isInputFilled]: !!value.trim(),\n        }));\n        break;\n      }\n\n      case Fields.Description: {\n        this.setState((state) => ({\n          ...state,\n          [isInputValid]: true,\n          [isInputFilled]: true,\n        }));\n        break;\n      }\n\n      case Fields.ImdbUrl:\n      case Fields.ImgUrl: {\n        this.setState((state) => ({\n          ...state,\n          [isInputValid]: regex.test(value),\n          [isInputFilled]: !!value.trim(),\n        }));\n        break;\n      }\n\n      case Fields.ImdbId: {\n        this.setState((state) => ({\n          ...state,\n          isImdbIdValid: !!value.trim() && !this.props.imdbIds.includes(value),\n          [isInputFilled]: !!value.trim(),\n        }));\n        break;\n      }\n\n      default:\n        throw new Error('enter valid data');\n    }\n  };\n\n  onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>\n  | React.KeyboardEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.currentTarget;\n    const isInputFilled = getInputFilledName(name);\n    const { typingTimeout } = this.state;\n\n    clearTimeout(typingTimeout);\n\n    this.setState((state) => ({\n      ...state,\n      [isInputFilled]: false,\n      typingTimeout: setTimeout(() => {\n        this.validateInput(name, value);\n      }, 700),\n    }));\n  };\n\n  disableButton = () => {\n    const {\n      wasSubmitButtonPressed,\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    return wasSubmitButtonPressed\n    && (!isTitleValid\n    || !isImgUrlValid\n    || !isImdbUrlValid\n    || !isImdbIdValid);\n  };\n\n  clearState = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isTitleValid: false,\n      isDescriptionValid: true,\n      isImgUrlValid: false,\n      isImdbUrlValid: false,\n      isImdbIdValid: false,\n      isTitleFilled: false,\n      isDescriptionFilled: false,\n      isImgUrlFilled: false,\n      isImdbUrlFilled: false,\n      isImdbIdFilled: false,\n      wasSubmitButtonPressed: false,\n    });\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imdbUrl,\n      imgUrl,\n      imdbId,\n      isTitleValid,\n      isDescriptionValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n      isTitleFilled,\n      isDescriptionFilled,\n      isImgUrlFilled,\n      isImdbUrlFilled,\n      isImdbIdFilled,\n    } = this.state;\n\n    return (\n      <>\n        <h3 className=\"title\">Add new movie</h3>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.Title}>\n              Title\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': isTitleFilled && isTitleValid },\n                  { 'is-danger': isTitleFilled && !isTitleValid },\n                )}\n                type=\"text\"\n                id={Fields.Title}\n                name={Fields.Title}\n                value={title}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onKeyUp={this.onKeyUp}\n              />\n              {isTitleFilled && isTitleValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {isTitleFilled && !isTitleValid && (\n              <p className=\"help is-danger\">This title is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.Description}>\n              Description\n            </label>\n            <div className=\"control has-icons-right\">\n              <textarea\n                className={classNames(\n                  'textarea',\n                  { 'is-success': isDescriptionFilled && isDescriptionValid },\n                  { 'is-danger': isDescriptionFilled && !isDescriptionValid },\n                )}\n                id={Fields.Description}\n                name={Fields.Description}\n                value={description}\n                onChange={this.handleChangeDescription}\n                onBlur={this.handleBlur}\n                onKeyUp={this.onKeyUp}\n              />\n              {isDescriptionFilled && isDescriptionValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImdbUrl}>\n              ImdbUrl\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': isImdbUrlFilled && isImdbUrlValid },\n                  { 'is-danger': isImdbUrlFilled && !isImdbUrlValid },\n                )}\n                type=\"text\"\n                id={Fields.ImdbUrl}\n                name={Fields.ImdbUrl}\n                value={imdbUrl}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onKeyUp={this.onKeyUp}\n              />\n              {isImdbUrlFilled && isImdbUrlValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {isImdbUrlFilled && !isImdbUrlValid && (\n              <p className=\"help is-danger\">This imdb url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImgUrl}>\n              ImgUrl\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': isImgUrlFilled && isImgUrlValid },\n                  { 'is-danger': isImgUrlFilled && !isImgUrlValid },\n                )}\n                type=\"text\"\n                id={Fields.ImgUrl}\n                name={Fields.ImgUrl}\n                value={imgUrl}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onKeyUp={this.onKeyUp}\n              />\n              {isImgUrlFilled && isImgUrlValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {isImgUrlFilled && !isImgUrlValid && (\n              <p className=\"help is-danger\">This img url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor={Fields.ImdbId}>\n              ImdbId\n            </label>\n            <div className=\"control has-icons-right\">\n              <input\n                className={classNames(\n                  'input',\n                  { 'is-success': isImdbIdFilled && isImdbIdValid },\n                  { 'is-danger': isImdbIdFilled && !isImdbIdValid },\n                )}\n                type=\"text\"\n                id={Fields.ImdbId}\n                name={Fields.ImdbId}\n                value={imdbId}\n                onChange={this.handleChange}\n                onBlur={this.handleBlur}\n                onKeyUp={this.onKeyUp}\n              />\n              {isImdbIdFilled && isImdbIdValid && (\n                <span className=\"icon is-small is-right\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </div>\n            {isImdbIdFilled && !isImdbIdValid && (\n              <p className=\"help is-danger\">This imdb url is invalid</p>\n            )}\n          </div>\n\n          <div className=\"control\">\n            <button\n              className=\"button is-success\"\n              type=\"submit\"\n              disabled={this.disableButton()}\n            >\n              Add movie\n            </button>\n          </div>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const getInputValidationName = (name: string) => (\n  `is${name[0].toUpperCase() + name.slice(1)}Valid`\n);\n\nexport const getInputFilledName = (name: string) => (\n  `is${name[0].toUpperCase() + name.slice(1)}Filled`\n);\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (newMovie: Movie) => {\n    this.setState((state) => ({\n      movies: [...state.movies, newMovie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n    const imdbIds = movies.map(movie => movie.imdbId);\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n            imdbIds={imdbIds}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}